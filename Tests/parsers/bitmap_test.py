from unittest import TestCase

from vfbLib.parsers.bitmap import BackgroundBitmapParser, GlyphBitmapParser

image_bin = (
    "fb3a"  # -166, origin x
    "fb64"  # -208, origin y
    "f9d5f9ab"  # 833 791, size in font units
    "a3a3"  # 24 24, size in pixels
    "ec"  # 97
    "07"
    "667777ff"
    "400001ff"
    "fe0000ff"
    "fe0008ff"
    "400001ff"
    "400001ff"
    "fe0000ff"
    "fe0018ff"
    "4ca241ff"
    "4ca241ff"
    "0aa240ff"
    "0aa240ff"
    "49b241ff"
    "499c79ff"
    "fe0000ff"
    "fe0008ff"
    "400001ff"
    "400001ff"
    "fe0000ff"
    "fe0008ff"
    "400001ff"
    "777773ff"
    "fe0000ff"
    "fe0000ff"
)

# TODO: Data returned by FL5 API:
# fmt: off
fl5_data = [
    153, 136, 136, 0,
    191, 255, 254, 0,
    255, 255, 255, 0,
    255, 255, 255, 0,
    191, 255, 254, 0,
    191, 255, 254, 0,
    255, 255, 255, 0,
    255, 255, 255, 0,
    179,  93, 190, 0,
    179,  93, 190, 0,
    245,  93, 191, 0,
    245,  93, 191, 0,
    182,  77, 190, 0,
    182,  99, 134, 0,
    255, 255, 255, 0,
    255, 255, 255, 0,
    191, 255, 254, 0,
    191, 255, 254, 0,
    255, 255, 255, 0,
    255, 255, 255, 0,
    191, 255, 254, 0,
    136, 136, 140, 0,
    255, 255, 255, 0,
    255, 255, 255, 0,
]
# fmt: on


image_dict = {
    "origin": (-166, -208),
    "size_units": (833, 791),
    "size_pixels": (24, 24),
    "len": 97,
    "bitmap": {
        "flag": 7,
        "data": [
            102,
            119,
            119,
            255,
            64,
            0,
            1,
            255,
            254,
            0,
            0,
            255,
            254,
            0,
            8,
            255,
            64,
            0,
            1,
            255,
            64,
            0,
            1,
            255,
            254,
            0,
            0,
            255,
            254,
            0,
            24,
            255,
            76,
            162,
            65,
            255,
            76,
            162,
            65,
            255,
            10,
            162,
            64,
            255,
            10,
            162,
            64,
            255,
            73,
            178,
            65,
            255,
            73,
            156,
            121,
            255,
            254,
            0,
            0,
            255,
            254,
            0,
            8,
            255,
            64,
            0,
            1,
            255,
            64,
            0,
            1,
            255,
            254,
            0,
            0,
            255,
            254,
            0,
            8,
            255,
            64,
            0,
            1,
            255,
            119,
            119,
            115,
            255,
            254,
            0,
            0,
            255,
            254,
            0,
            0,
            255,
        ],
        "preview": [
            "█▉█▉█▉█▉█▉█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉",
            "█▉█▉█▉█▉█▉█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉",
            " ▕█▉█▉█▉ ▕█▉█▉█▉ ▕█▉█▉█▉ ▕█▉█▉█▉ ▕█▉█▉█▉ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉█▉█▉",
            " ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉█▉",
            "█▉█▉█▉█▉█▉█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕█▉ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉",
            "█▉█▉█▉█▉█▉█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉",
            " ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉█▉",
            " ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉█▉",
            "█▉█▉█▉█▉█▉█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕█▉ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉",
            "█▉█▉█▉█▉█▉█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉",
            " ▕█▉ ▕ ▕█▉ ▕ ▕█▉█▉ ▕ ▕█▉█▉█▉ ▕ ▕ ▕█▉█▉█▉█▉ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉█▉",
            " ▕█▉ ▕ ▕█▉ ▕ ▕█▉█▉ ▕█▉█▉ ▕ ▕█▉ ▕ ▕█▉ ▕ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉█▉",
            " ▕ ▕ ▕ ▕█▉ ▕█▉ ▕█▉ ▕█▉ ▕ ▕ ▕█▉ ▕ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉",
            " ▕ ▕ ▕ ▕█▉ ▕█▉ ▕█▉ ▕█▉ ▕ ▕ ▕█▉ ▕ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉",
            " ▕█▉ ▕ ▕█▉█▉ ▕ ▕█▉ ▕█▉ ▕ ▕ ▕█▉ ▕ ▕█▉ ▕ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉█▉",
            " ▕█▉ ▕ ▕█▉█▉ ▕ ▕█▉ ▕█▉ ▕ ▕ ▕█▉ ▕ ▕█▉ ▕ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉█▉",
            "█▉█▉█▉█▉█▉█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕█▉█▉ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉",
            "█▉█▉█▉█▉█▉█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉",
            " ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉█▉",
            " ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉█▉",
            "█▉█▉█▉█▉█▉█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕█▉ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉",
            "█▉█▉█▉█▉█▉█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉",
            " ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉█▉█▉",
            " ▕█▉█▉ ▕ ▕█▉█▉ ▕ ▕█▉█▉█▉ ▕█▉█▉█▉ ▕█▉█▉█▉ ▕█▉█▉█▉█▉█▉█▉█▉█▉█▉█▉█▉",
        ],
    },
}


class BackgroundBitmapParserTest(TestCase):
    def test_1(self):
        result = BackgroundBitmapParser().parse_hex(image_bin)
        assert result == image_dict


glyph_bin = (
    "94"  # 9 Bitmaps follow
    "9a"  # 15 ppm
    "8b8a"  # 0 -1: origin
    "938b"  # 8 0: advance
    "9495"  # 9 10: size in pixels
    "9f"  # 20 bytes follow
    "1000003b00660066003e000600660066003cfe00"  # 16 ...
    "99"  # 14 ppm
    "8b8a"  # 0 -1: origin
    "938b"  # 8 0: advance
    "9394"  # 8 9: size in pixels
    "9d"  # 18 bytes follow
    "0e00003b00660066003e00060066003cfe00"  # 14 ...
    "98"  # 13 ppm
    "8b8a"  # 0 -1: origin
    "928b"  # 7 0: advance
    "9394"  # 8 9: size in pixels
    "8d"  # 2 bytes follow
    "ef00"  # 239 ...
    "95"  # 10 ppm
    "8a8a"
    "908b"
    "9292"
    "99"  # 14 bytes follow
    "0a0000340048003800080070fe00"  # 10 ...
    "96"  # 11 ppm
    "8a8a"
    "918b"
    "9393"
    "9b"  # 16 bytes follow
    "0c000036004c0044003c00040038fe00"  # 12 ...
    "93"  # 8 ppm
    "8a8a"
    "8f8b"
    "9191"
    "97"  # 12 bytes follow
    "08000068005800080070fe00"  # 8 ...
    "94"  # 9 ppm
    "8a8a"
    "908b"
    "9292"
    "99"  # 14 bytes follow
    "0a0000340048003800080070fe00"  # 10 ...
    "97"  # 12 ppm
    "8b8a"
    "928b"
    "9293"
    "9b"  # 16 bytes follow
    "0c000036004c0044003c00040078fe00"  # 12 ...
    "9b"  # 16 ppm
    "8b8a"
    "948b"
    "9495"
    "a0"  # 21 bytes follow
    "135500aa805500aa805500aa805500aa805500aa80"  # 19 ...
)

glyph_raw = [
    {
        "ppm": 15,
        "origin": (0, -1),
        "adv": (8, 0),
        "size_pixels": (9, 10),
        "len": 20,
        "bitmap": {
            "flag": 16,
            "data": [
                0,
                0,
                59,
                0,
                102,
                0,
                102,
                0,
                62,
                0,
                6,
                0,
                102,
                0,
                102,
                0,
                60,
                254,
                0,
            ],
            "preview": [
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕█▉█▉█▉█▉ ▕ ▕█▉█▉█▉█▉█▉█▉█▉ ▕",
                " ▕█▉█▉ ▕ ▕█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉█▉ ▕ ▕█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕ ▕ ▕ ▕█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕█▉█▉█▉█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉█▉ ▕ ▕█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉█▉ ▕ ▕█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕█▉█▉█▉ ▕█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
            ],
        },
    },
    {
        "ppm": 14,
        "origin": (0, -1),
        "adv": (8, 0),
        "size_pixels": (8, 9),
        "len": 18,
        "bitmap": {
            "flag": 14,
            "data": [0, 0, 59, 0, 102, 0, 102, 0, 62, 0, 6, 0, 102, 0, 60, 254, 0],
            "preview": [
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕█▉█▉█▉█▉ ▕ ▕█▉█▉█▉█▉█▉█▉█▉ ▕",
                " ▕█▉█▉ ▕ ▕█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕ ▕ ▕ ▕█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕█▉█▉█▉█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉█▉ ▕ ▕█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉█▉ ▕ ▕█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕█▉█▉█▉ ▕█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
            ],
        },
    },
    {
        "ppm": 13,
        "origin": (0, -1),
        "adv": (7, 0),
        "size_pixels": (8, 9),
        "len": 2,
        "bitmap": {
            "flag": 239,
            "data": [0],
            "preview": [
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
            ],
        },
    },
    {
        "ppm": 10,
        "origin": (-1, -1),
        "adv": (5, 0),
        "size_pixels": (7, 7),
        "len": 14,
        "bitmap": {
            "flag": 10,
            "data": [0, 0, 52, 0, 72, 0, 56, 0, 8, 0, 112, 254, 0],
            "preview": [
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉█▉█▉ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉ ▕",
                " ▕ ▕ ▕ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕█▉█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉ ▕ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕█▉█▉ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
            ],
        },
    },
    {
        "ppm": 11,
        "origin": (-1, -1),
        "adv": (6, 0),
        "size_pixels": (8, 8),
        "len": 16,
        "bitmap": {
            "flag": 12,
            "data": [0, 0, 54, 0, 76, 0, 68, 0, 60, 0, 4, 0, 56, 254, 0],
            "preview": [
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕█▉█▉█▉ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉ ▕",
                " ▕ ▕ ▕ ▕ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕█▉█▉█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉ ▕ ▕ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉ ▕ ▕█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕█▉█▉ ▕█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
            ],
        },
    },
    {
        "ppm": 8,
        "origin": (-1, -1),
        "adv": (4, 0),
        "size_pixels": (6, 6),
        "len": 12,
        "bitmap": {
            "flag": 8,
            "data": [0, 0, 104, 0, 88, 0, 8, 0, 112, 254, 0],
            "preview": [
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉█▉█▉ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉ ▕",
                " ▕ ▕ ▕ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉ ▕█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉█▉ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
            ],
        },
    },
    {
        "ppm": 9,
        "origin": (-1, -1),
        "adv": (5, 0),
        "size_pixels": (7, 7),
        "len": 14,
        "bitmap": {
            "flag": 10,
            "data": [0, 0, 52, 0, 72, 0, 56, 0, 8, 0, 112, 254, 0],
            "preview": [
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉█▉█▉ ▕ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉ ▕",
                " ▕ ▕ ▕ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕█▉█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉ ▕ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕█▉█▉ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
            ],
        },
    },
    {
        "ppm": 12,
        "origin": (0, -1),
        "adv": (7, 0),
        "size_pixels": (7, 8),
        "len": 16,
        "bitmap": {
            "flag": 12,
            "data": [0, 0, 54, 0, 76, 0, 68, 0, 60, 0, 4, 0, 120, 254, 0],
            "preview": [
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉█▉█▉█▉ ▕ ▕ ▕█▉█▉█▉█▉█▉█▉█▉ ▕",
                " ▕ ▕ ▕ ▕ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕█▉█▉█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉ ▕ ▕ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉ ▕ ▕█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕█▉█▉ ▕█▉█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
            ],
        },
    },
    {
        "ppm": 16,
        "origin": (0, -1),
        "adv": (9, 0),
        "size_pixels": (9, 10),
        "len": 21,
        "bitmap": {
            "flag": 19,
            "data": [
                85,
                0,
                170,
                128,
                85,
                0,
                170,
                128,
                85,
                0,
                170,
                128,
                85,
                0,
                170,
                128,
                85,
                0,
                170,
                128,
            ],
            "preview": [
                "█▉ ▕█▉ ▕█▉ ▕█▉ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉ ▕█▉ ▕█▉ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                "█▉ ▕█▉ ▕█▉ ▕█▉ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉ ▕█▉ ▕█▉ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                "█▉ ▕█▉ ▕█▉ ▕█▉ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉ ▕█▉ ▕█▉ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                "█▉ ▕█▉ ▕█▉ ▕█▉ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉ ▕█▉ ▕█▉ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                "█▉ ▕█▉ ▕█▉ ▕█▉ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
                " ▕█▉ ▕█▉ ▕█▉ ▕█▉ ▕ ▕ ▕ ▕ ▕ ▕ ▕ ▕",
            ],
        },
    },
]


class GlyphBitmapParserTest(TestCase):
    def test_1(self):
        result = GlyphBitmapParser().parse_hex(glyph_bin)
        assert result == glyph_raw
